import { useState, useRef } from "react";
import axios from "axios";

const LineBroadcast = () => {
  const [message, setMessage] = useState("");
  const [image, setImage] = useState(null);
  const [previewImage, setPreviewImage] = useState(null);
  const [link, setLink] = useState("");
  const [isUploading, setIsUploading] = useState(false);
  const inputFileRef = useRef(null);
  const [error, setError] = useState(null);


  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ Cloudinary
  const handleImageUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setPreviewImage(URL.createObjectURL(file));
    setIsUploading(true);

    const formData = new FormData();
    formData.append("file", file);
    formData.append("upload_preset", "line_broadcast");
    formData.append("cloud_name", "dv9rio4jw");

    try {
      const response = await axios.post(
        "https://api.cloudinary.com/v1_1/dv9rio4jw/image/upload",
        formData
      );
      setImage(response.data.secure_url);
      setError(null); // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï error ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    } catch (error) {
      setError("‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE Broadcast API
  const sendBroadcast = async () => {
    if (!message && !image && !link) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á");
      return;
    }

    if (isUploading) {
      alert("‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô...");
      return;
    }

    try {
      const payload = { message, image, link };
      const response = await fetch("http://localhost:5000/api/line-broadcast/send", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      const data = await response.json();
      if (response.ok) {
        alert("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        setMessage("");
        setImage(null);
        setPreviewImage(null);
        setLink("");
        if (inputFileRef.current) inputFileRef.current.value = "";
        setError(null); // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï error ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      } else {
        setError("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + data.error);
      }
    } catch (error) {
      setError("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100">
      <div className="bg-white shadow-lg rounded-lg p-6 w-full max-w-lg">
        <h2 className="text-2xl font-bold text-center mb-4">üì¢ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE Broadcast</h2>

        <textarea
          className="w-full p-2 border rounded-md mb-3"
          placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."
          value={message}
          onChange={(e) => setMessage(e.target.value)}
        />

        <div className="mb-3">
          <label className="block font-semibold">üîó ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
          <input
            type="text"
            className="w-full p-2 border rounded-md"
            placeholder="‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå..."
            value={link}
            onChange={(e) => setLink(e.target.value)}
          />
        </div>

        <div className="mb-3">
          <label className="block font-semibold">üì∑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
          <input ref={inputFileRef} type="file" accept="image/*" onChange={handleImageUpload} />
          {isUploading && <p className="text-yellow-500 text-sm mt-2">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ...</p>}
        </div>

        {previewImage && (
          <div className="mb-3 flex justify-center">
            <img src={previewImage} alt="Preview" className="w-40 h-40 object-cover rounded-md" />
          </div>
        )}

        <button
          className={`w-full px-4 py-2 text-white font-bold rounded-md ${
            isUploading ? "bg-gray-400" : "bg-green-500 hover:bg-green-600"
          }`}
          onClick={sendBroadcast}
          disabled={isUploading}
        >
          üöÄ {isUploading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î..." : "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"}
        </button>
        {error && <p className="text-red-500 text-sm mt-2 text-center">{error}</p>}
      </div>
    </div>
  );
};

export default LineBroadcast;
